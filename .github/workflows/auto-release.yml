name: Auto Release with Multi-Platform Build

on:
  push:
    branches:
      - main

jobs:
  # Job to create the release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract Version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          body: |
            Automated release for commit ${{ github.sha }}
          draft: false
          prerelease: false

  # Windows Build Job
  windows-release:
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Windows Executable
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/untabify.exe
          asset_name: untabify-windows.exe
          asset_content_type: application/octet-stream

  # Linux Build Job
  linux-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Linux Executable
        run: cargo build --release --all-features

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/untabify
          asset_name: untabify-linux
          asset_content_type: application/octet-stream
