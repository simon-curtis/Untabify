name: Auto Release with Multi-Platform Build

on:
  push:
    branches:
      - main

jobs:
  # Job to create or update the release
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched for tagging

      - name: Extract Version from Cargo.toml
        id: extract_version
        run: |
          VERSION=$(awk -F '"' '/^version/ {print $2}' Cargo.toml)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Git Config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Delete Existing Tag (if any)
        run: |
          git tag -d "v${{ steps.extract_version.outputs.version }}" || true
          git push origin :refs/tags/v${{ steps.extract_version.outputs.version }} || true

      - name: Create Tag
        run: |
          git tag "v${{ steps.extract_version.outputs.version }}"
          git push origin "v${{ steps.extract_version.outputs.version }}"

      - name: Create or Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: Release v${{ steps.extract_version.outputs.version }}
          body: |
            Automated release for commit ${{ github.sha }}
          draft: false
          prerelease: false

  # Windows Build Job
  windows-release:
    runs-on: windows-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Windows Executable
        run: cargo build --release --all-features --target x86_64-pc-windows-msvc 

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/untabify.exe
          asset_name: untabify-windows-x64.exe
          asset_content_type: application/octet-stream

  # Linux Build Job
  linux-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Linux Executable
        run: cargo build --release --all-features

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/release/untabify
          asset_name: untabify-linux
          asset_content_type: application/octet-stream
